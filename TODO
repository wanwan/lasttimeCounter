[TODO]

* type の編集機能を実装する

* 再実行 -> 実行履歴表示のフローを作成する

* edit 用の dialog をやっつけになっているのをリファクタリングする

* ソート機能の実装
  - last date

* フィルタ機能の実装
  - type

* UI インターフェースを何に何を振るか考える
  listview
  - 単押し
    再実行
  - 長押し
    history / delete (あまり使用頻度の高くないもの?)
  - menu
    sort / filter / notification
  - "+" btn
    追加

* backup / restore
  - databases で基本的に backup / 復元ができるように.
  - backup は databases 以下を残せばいける.
  - restore は, UI からのフローと, コピーで.
    - db がコピーで置かれた場合 onCreate がスキップする, というイメージ.
    - db 自身の version を DB から知らなければいけないかもしれないので metainfo を作成.
  - ".dump" 等命令は SQLiteOpenHelper 経由では不正と怒られるのでとりあえず丸コピーで.
    - restore は convert と同じという理解で良いと思う

* lastdate の配列 (実行日時) をテーブル化し外部参照で見れるようにする.

* DB スキーマのアップデートロジックを作成

* type の追加/削除ロジック追加

* items - itemtypes の間で参照関係を作成する
  -> 外部キーでは強すぎるか?
  -> 更新フローをどうするかは検討する必要があるが. int id では更新でテーブルが差し交わる場合
     等での不整合があるはずだが.
  
* "+" ボタンクリック時のアニメーションをつける

* DB の version を取得できるようにする.
  -> metainfo 的な情報格納をやる一行テーブルでも持つか?
  -> SQLiteOpenHelper で old / new があるので何とかなるような気もするが, 他の属性が必要になる可能性があるので...
  -> backup/restore でバージョン変わった, の可能性と store 経由でのアップデートの可能性があるが同一には出来無いか?
     -> sqlite やめる?
     	sharedpref とか xml とかにするのもありといえばありだが, scheme 問題は付き纏うような.
  -> DB の version 互換を考えるなら select * とかにしておいて, cursor から引っぱるときに exception を拾ったほうがよいか?
  	
* itemtypes の assets から初期値いれるロジック. context に依存しているのでコンストラクタでリスト取って,
  onCreate で入れているがなんとかならんか?
  -> context 覚えたくないのでやってみた苦肉の策なんだが...

* type の default の設定をおこなう.
  type_id = 0 が自然 itemtypes の autoincrement まわりを弄るなりして 0, default のエントリを用意する
  or hit しない場合は default にする (外部参照制約が掛けられなくなるが)

[suspend]

[done]  
* 項目の内訳フィールド等を正しく作成する (name/detail/type/lastdate/createdate)
* item の更新フローの作成

* itemtype の初期値と id を自動振りするようにする
  -> default はとりあえず "1" 固定で.

* menu 項目作成 (フィルタ/ソート/?)

* db からの item のレストア時に date が null になっているっぽいので修正

* edit 用 dialog を作成する
  -> new と同じでよいか?

* type 用テーブルと外部参照の設定

* 現在日までの経過日数を表示する
  yyyy-mm-dd (N) という感じでよいか

* 新規アイテム追加時のソートが効いていないのを修正する
  -> おそらく日付更新の場合も必要

* 再編集機能を作成する